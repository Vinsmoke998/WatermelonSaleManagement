package vn.com.courseman.model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.util.Tuple;
import vn.com.courseman.model.reports.CustomerByNameReport;
import vn.com.courseman.model.reports.CustomerByTypeReport;

/**
 * A domain class whose objects are city names. This class is used as the
 * <code>allowedValues</code> of the domain attributes of other domain classes
 * (e.g. Student.address).
 * 
 * <p>
 * Method <code>to	String</code> overrides <code>Object.toString</code> to
 * return the string representation of a city name which is expected by the
 * application.
 * 
 * @author dmle
 *
 */
@DClass(schema = "courseman")
public class TypeOfCustomer {
	public static final String A_name= "name";
	
	public static final String A_rptCustomerByType = "rptCustomerByType";
	@DAttr(name = "id", id = true, auto = true, length = 3, mutable = false, optional = false, type = Type.Integer)
	private int id;
	private static int idCounter;

	@DAttr(name = A_name, type = Type.String, length = 20, optional = false)
	private String name;

	@DAttr(name = "customer", type = Type.Domain, serialisable = false)
	@DAssoc(ascName = "customer-has-type", role = "type", ascType = AssocType.One2Many, endType = AssocEndType.Many, associate = @Associate(type = Customer.class, cardMin = 1, cardMax = MetaConstants.CARD_MORE, determinant = true))
	private Customer customer;

	@DAttr(name = A_rptCustomerByType, type = Type.Domain, serialisable = false,
			// IMPORTANT: set virtual=true to exclude this attribute from the object state
			// (avoiding the view having to load this attribute's value from data source)
			virtual = true)
	private CustomerByTypeReport rptCustomerByType;

	// from object form: Student is not included
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public TypeOfCustomer(@AttrRef("name") String typeName) {
		this(null, typeName, null);
	}

	// from object form: Student is included

	public TypeOfCustomer(@AttrRef("name") String typeName, @AttrRef("customer") Customer customer) {
		this(null, typeName, customer);
	}

	// from data source
	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public TypeOfCustomer(@AttrRef("id") Integer id, @AttrRef("name") String typeName) {
		this(id, typeName, null);
	}

	// based constructor (used by others)
	private TypeOfCustomer(Integer id, String typeName, Customer customer) {
		this.id = nextId(id);
		this.name = typeName;
		this.customer = customer;
	}

	private static int nextId(Integer currID) {
		if (currID == null) {
			idCounter++;
			return idCounter;
		} else {
			int num = currID.intValue();
			if (num > idCounter)
				idCounter = num;

			return currID;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class
			int maxIdVal = (Integer) maxVal;
			if (maxIdVal > idCounter)
				idCounter = maxIdVal;
		}
	}

	public int getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Customer getCustomer() {
		return customer;
	}

	@DOpt(type = DOpt.Type.LinkAdderNew)
	public void setNewCustomer(Customer student) {
		this.customer = customer;
		// do other updates here (if needed)
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Override
	public String toString() {
		return name;
	}
}
